.MODE       Register    ; Instructs the VM use the register instruction set.
.HEAP       64          ; Start with 64 KiB heap size
.HEAP_MAX   262 144     ; 256 MiB. Overflows will terminate the program at runtime.

// Execution starts here.
      JMP     init                  // Start by jumping to init.

init: NOP	                          ; Do nothing.
      NOP
      NOP	                          // Do nothing.
      JMP	    main                  ; Jump to main.

main:  // Entry point.
  ; It starts here.
      LDI     R0,     8 + 2         // Addition
      LDI     R1,     8 - 2         // Subtraction
      LDI     R2,     8 * 5         // Multiplication
      LDI     R3,     8 / 2         // Division.
      LDI     R4,     8 / 10        ; One more division.
      LDI     R5,     1024          ; Load 1024 into R5.
      LDI     R6,     -20           ; Load -20 into R6.
      LDI     R1,     6             // Load 6 into R1.
      ADD     R0,     R1,     R2
      SUB     R0,     R1,     R2    ; Subtract

// Data

str1:             .BYTE 13, "Hello, there"   ; Strings are zero-terminated, but you must still include it in the size.
str2:             .BYTE 8,  "Example"        ; The first argument specifies how many bytes to allocate.
static_int:       .BYTE 4,  1024
static_float:     .BYTE 4,  4.81f            ; Float must be suffixed with 'f', otherwise
static_double:    .BYTE 8,  4.81             ; they are interpreted as doubles, which are 8 bytes words.
